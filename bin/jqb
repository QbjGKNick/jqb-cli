#! /usr/bin/env node

// console.log('jqb-cli')

// 1) 配置可执行命令
const program = require('commander')
const chalk = require('chalk')

// 核心功能 1. 创建项目 2. 更改配置文件 3.UI界面 @vue/ui

const cleanArgs = (cmd) => {
  const args = {}
  cmd.options.forEach(o => {
    const key = o.long.slice(2)
    if (cmd[key]) args[key] = cmd[key]
  })
  return args
}

// 万一重名了呢？ 强制创建的模式
program
  .command(`create <app-name>`)
  .description(`create a new project`)
  .option('-f, --force', 'overwrite target directory if it exists')
  .action((name, cmd) => {
    // 调用create模块去创建

    require('../lib/create')(name, cleanArgs(cmd))
    
    // 我需要提取这个cmd中的属性
  })

// vue config --set a 1 => 配置文件中
// vue config --get a
program
  .command('config [value]')
  .description('inspect and modify the config')
  .option('-g, --get <path>', 'get value from option')
  .option('-s, --set <path> <value>')
  .option('-d, --delete <path>', 'delete option from config')
  .action((value, cmd) => {
    console.log(value, cleanArgs(cmd))
  })

program
  .command('ui')
  .description('start and open jqb-cli ui')
  .option('-p, --port <port>', 'Port used for the UI server')
  .action(cmd => {
    console.log(cleanArgs(cmd))
  })

program
  .version(`jqb-cli@${require('../package.json').version}`)
  .usage(`<command> [option]`)

// 解析用户执行命令传入的参数

program.on('--help', function () {
  console.log()
  console.log(`Run ${chalk.green('jqb-cli <command> --help')} show details`)
  console.log()
})


program.parse(process.argv)
// 2) 我们要实现脚手架 先做一个命令行交互的功能 inquirer

// 3）将模板下载下来 download-git-repo

// 4) 根据用户的选择动态的生成内容 metalsmith